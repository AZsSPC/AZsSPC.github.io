//victorine
class Question {
    init quest, answers, current, cost, user_answer
    construct: quest, answers, current, cost {
        init quest_str = quest
        for i from 0 to answers.length {
            quest_str += '\n\t' i ') ' answers
        }
        this.quest = quest_str
        this.current = current
        this.cost = cost
    }

    make_question {
        ask quest, user_answer
        if user_answer == current {
            say 'right!'
            return cost
        } else {
            say 'wrong!'
            return 0
        }
    }
}
init victorine = [
    (new Question: 'A or B?', ['A', 'B'], 0, 1),
    (new Question: 'B or C?', ['B', 'C'], 1, 1),
    (new Question: 'A or C?', ['A', 'C'], 0, 1)
]
init score = 0
for i from 0 to victorine.length {
    score += victorine[i].make_question
}
say 'Score: ' i

// calculator

init a, b, c, result
ask 'operand a:', a
ask 'operand b:', b
ask 'operation:', c
// ; used as end of case
switch c {
    case '+': result = a + b;
    case '-': result = a - b;
    case '*': result = a * b;
    case '/': result = a / b;
    default:  result = NaN;
}
if result != NaN {
    say a c b '=' result
} else {
    say 'Error'
}
